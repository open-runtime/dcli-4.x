name: (Shared) DCLI Unit Tests

on:
  workflow_call:
    inputs:
      matrix-config:
        description: 'The Matrix as a JSON String to be used for the Matrix Strategy'
        required: true
        type: string

jobs:
  compose:
    name: ${{ matrix.config.name }} Composition
    runs-on: ${{ matrix.config.runner }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - ${{ fromJSON(inputs.matrix-config) }}

    env:
      GH_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

    steps:
      - uses: actions/checkout@v2
      - uses: dart-lang/setup-dart@v1.3

      - name: Echo Default Cache Paths
        if: matrix.config.system_information.kernel_family == 'unix'
        env:
          DART_SDK_DIR_DEFAULT: /opt/hostedtoolcache/dart-sdk/
          HOME_BREW_DIR_DEFAULT: /usr/local
          DCLI_BIN_DIR_DEFAULT: .dcli/bin/
          PUB_CACHE_DIR_DEFAULT: .pub-cache/
        run: |
          echo "HOME_BREW_DIR=$(command -v brew >/dev/null 2>&1 && echo "$(brew --prefix)" || echo $HOME_BREW_DIR_DEFAULT)" >> $GITHUB_ENV
          echo "DCLI_BIN_DIR=$HOME/${DCLI_BIN_DIR_DEFAULT}" >> $GITHUB_ENV
          echo "PUB_CACHE_DIR=$HOME/${PUB_CACHE_DIR_DEFAULT}" >> $GITHUB_ENV
          echo "DART_SDK_DIR=$(echo $DART_SDK_DIR_DEFAULT)" >> $GITHUB_ENV

      - name: Echo Default Cache Paths [Windows]
        if: matrix.config.system_information.operating_system_family == 'windows'
        env:
          DART_SDK_DIR_DEFAULT: C:\tools\dart-sdk\bin
        run: |
          echo "DART_SDK_DIR=$($env:DART_SDK_DIR_DEFAULT)" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          
          $program_files = $env:ProgramFiles
          $dcli_bin_dir = Join-Path -Path $program_files -ChildPath "\.dcli\bin"
          echo "DCLI_BIN_DIR=$dcli_bin_dir" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "PUB_CACHE_DIR=$env:USERPROFILE\.pub-cache\" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Echo Initial Cache Locations
        run: |
          echo 'DART_SDK_DIR: ${{ env.DART_SDK_DIR }}'
          echo 'DCLI_BIN_DIR: ${{ env.DCLI_BIN_DIR }}'
          echo 'PUB_CACHE_DIR: ${{ env.PUB_CACHE_DIR }}'

      - name: Run Pub Get
        run: |
          cd ./dcli && dart pub get
          cd ../dcli_common && dart pub get
          cd ../dcli_core && dart pub get
          cd ../dcli_sdk && dart pub get
          cd ../dcli_input && dart pub get
          cd ../dcli_terminal && dart pub get
          cd ../dcli_test && dart pub get
          cd ../dcli_unit_tester && dart pub get
          cd ../

      # Compile internal scripts with pure dart - the only difference here is that these files do not start with a `#! /usr/bin/env dcli` line
      - name: Compile AOTs for DCLI on Unix
        run: |
          dart compile exe ./dcli_sdk/bin/dcli.internal.dart -o ./dcli_sdk/bin/dcli_internal
          dart compile exe ./dcli_sdk/bin/dcli_complete.internal.dart -o ./dcli_sdk/bin/dcli_internal_complete
          dart compile exe ./dcli_sdk/bin/dcli_install.internal.dart -o ./dcli_sdk/bin/dcli_internal_install 

      # Use the internal dcli executable to compile the dcli scripts that start with `#! /usr/bin/env dcli` line
      - name: Compile AOTs with Local Internal DCLI Binary on Unix
        run: |
          ./dcli_sdk/bin/dcli_internal -v compile --nowarmup -o ./dcli_sdk/bin/dcli.dart ./dcli_sdk/bin/dcli_complete.dart ./dcli_sdk/bin/dcli_install.dart

      - name: Activate DCLI Globally from Local SDK Path on Unix
        run: |
          dart pub global activate -spath ./dcli_sdk --overwrite

      - name: Echo DCLI Path & Version
        run: |
          echo $(which dcli)
          echo $(dcli)

# No longer need to move manually as we are using dcli compile -i to automatically install compiled scripts
#      - name: Move AOTs to Dart Pub Cache
#        run: |
#          mv ./dcli_sdk/bin/dcli $PUB_CACHE_DIR/bin
#          mv ./dcli_sdk/bin/dcli_complete $PUB_CACHE_DIR/bin
#          mv ./dcli_sdk/bin/dcli_install $PUB_CACHE_DIR/bin

      - name: Run DCLI Install
        run: |
          sudo env "PATH=$PATH" dcli -v install

      - name: Compile and install hello_world.dart with DCLI
        run: |
          dcli -v compile -i --nowarmup ./example/hello_world.dart

      - name: Echo Hello World Script Path & Version
        run: |
          echo $(which hello_world)
          echo $(hello_world)

#      - name: Run Unit Tests for synchronous_test.dart
#        run: cd ./dcli && dart test ./test/src/process/process/synchronous_test.dart && cd ../
